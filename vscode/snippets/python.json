{
  // Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // },
  "Insert Notebook Code Cell": {
    "prefix": "#",
    "body": ["#%%"],
    "description": "Define code cell of notebook"
  },
  "Logger": {
    "prefix": "logger",
    "body": ["_logger = logging.getLogger(__name__)"],
    "description": "Declare logger instance for this module"
  },
  "debugger": {
    "prefix": "debugger",
    "body": ["import pdb; pdb.set_trace()"],
    "description": "add pdb debbuger"
  },
  "If main": {
    "prefix": ["ifmain", "main"],
    "body": [
      "if __name__ == \"__main__\" and \"__file__\" in globals():",
      "\t",
    ],
    "description": "Insert if __name__ == \"__main__\""
  },
  "Plotly": {
    "prefix": "plot",
    "description": "Plot line figure with plotly",
    "body": [
      // "import plotly.express as px",
      "px.line(df)"
    ],
  },
  "Plotly Graph Object": {
    "prefix": ["plot", "go"],
    "description": "Plot line figure with plotly graph objects",
    "body": [
      "figure: Figure = go.Figure()",
      "figure.add_trace(go.Scatter(df))"
    ]
  },
  "Plotly ipywidget": {
    "prefix": "widget",
    "body": [
      "import plotly.graph_objects as go",
      "from plotly.graph_objs._figure import Figure",
      "from plotly.graph_objs._figurewidget import FigureWidget",
      "import ipywidgets as widgets",
      "from portfolio.plotting import god",
      "",
      "figure: Figure = go.Figure()",
      "figure.add_trace(go.Scatter(name=\"data\"))",
      "",
      "g: FigureWidget = go.FigureWidget(figure)",
      "@widgets.interact()",
      "@g.batch_update()",
      "def draw_figure():",
      "\tg.update_traces(go.Scatter(**god(data.adjust)), selector=dict(name=\"data\"))",
      "",
      "g",
    ]
  },
}
